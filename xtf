#!/bin/bash
export POSIXLY_CORRECT=yes

#
# Author: Jaroslav Vehovsky
# Xlogin: xvehov01
# Project: IOS_project1
# File: xtf
# Created: 03/03/2024
#

filter_after=""
filter_before=""
filter_currency=""
command=""
user=""
log_data=""

main() {
  # No arguments provided, show help
  if [ $# -eq 0 ]; then
    help
    exit
  fi

  # Handle --help command
  if [ "$1" = "--help" ]; then
    help
    exit
  fi

  # Handle arguments
  while getopts ":ha:b:c:" opts; do
    case $opts in
      h)
        help
        exit
        ;;
      a)
        filter_after="$OPTARG"
        validate_datetime "$filter_after"
        ;;
      b)
        filter_before="$OPTARG"
        validate_datetime "$filter_before"
        ;;
      c)
        filter_currency="$OPTARG"
        if [ ! ${#filter_currency} -eq 3 ]; then
          echo "Currency symbol must be three characters long" >&2
          exit 1
        fi
        ;;
      \?)
        echo "Invalid option -$OPTARG" >&2
        help
        exit 1
        ;;
      :)
        echo "-$OPTARG requires an argument" >&2
        help
        exit 1
        ;;
    esac
  done

  # Shift already parsed arguments
  shift $((OPTIND - 1))

  # Less than 2 arguments result in error
  if [ $# -lt 2 ]; then
    echo "Not enough arguments" >&2
    help
    exit 1
  fi

  # Handle COMMAND, USER and LOG arguments
  if [ $# -lt 3 ]; then
    command="list"
    user="$1"
    shift 1
  else
    command="$1"
    user="$2"
    shift 2
  fi

  for file in "$@"; do
    read_data "$file"
  done

  # Removes empty lines
  log_data=$(echo "$log_data" | grep -v '^$')

  # Validate log data
  if  ! echo "$log_data" | awk -F ';' '
    BEGIN {
      passed = 1
    } {
      if (length($3) != 3 || $2 !~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/ || $4 !~ /^[-+]?[0-9]*\.?[0-9]+$/) {
        passed = 0
        exit
      }
    }
    END {
      if (passed) {
        exit 0
      } else {
        exit 1
      }
    }
  ' ; then
    echo "Log data are invalid" >&2
    exit 1
  fi

  # If $filter_currency was set, filter $log_data by currency
  if [ -n "$filter_currency" ]; then
      log_data=$(echo "$log_data" | awk -F ';' -v currency="$filter_currency" '$3 == currency')
  fi
  
  # If $log_data is empty, stop execution
  if [ -z "$log_data" ]; then
      exit 0
  fi

  # Handle different commands
  case "$command" in
  list)
    # Handle list command
    # Lists all log entries for specified user
    printf "%s" "$log_data"
    exit 0
    ;;
  list-currency)
    # Handle list-currency
    # Lists all the currencies present in users account sorted alphabetically
    currencies=$(echo "$log_data" | awk -F ';' '
      {
        print $3
      }' | sort | uniq)

    printf "%s\n" "$currencies"
    exit 0
    ;;
  status)
    # Handle status
    # Lists all the currencies present is users profile together with the balance
    currency_sum=$(echo "$log_data" | awk -F ';' '
      {
        sum[$3]+=$4
      } END {
        for (currency in sum) {
          printf "%s : %.4f\n", currency, sum[currency]
        }
      }' | sort)

    printf "%s\n" "$currency_sum"
    exit 0
    ;;
  profit)
    # Handle profit
    # Lists all the currencies present is users profile together with the balance and profit

    # Check if $XTF_PROFIT is set, if not set it to 20%
    if [ -z "$XTF_PROFIT" ]; then
      XTF_PROFIT=20
    fi

    currency_sum=$(echo "$log_data" | awk -F ';' -v profit="$XTF_PROFIT" '
      {
        sum[$3]+=$4
      } END {
        for (currency in sum) {
          balance = sum[currency];
          if (balance > 0) {
            balance *= 1 + (profit / 100);
          }
          printf "%s : %.4f\n", currency, balance
        }
      }' | sort)

    printf "%s\n" "$currency_sum"
    exit 0
    ;;
  *)
    echo "Invalid command" >&2
    exit 1
    ;;
  esac

}

help() {
   cat <<EOF
  Usage: $0 [-h|--help] [FILTER] [COMMAND] USER LOG [LOG2 [...]

  COMMAND:
    list            List records for specified user
    list-currency   List all currencies in users account
    status          Show account balance
    profit          Show account balance with profit

  FILTER:
    -a DATETIME     Show only records after this date. DATETIME format YYYY-MM-DD HH:MM:SS
    -b DATETIME     Show only records before this date. DATETIME format YYYY-MM-DD HH:MM:SS
    -c CURRENCY     Show only records of specified currency

  -h --help         Get help info
EOF
}

validate_datetime() {
  datetime_regex="^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$"
  if ! printf '%s\n' "$@" | grep -Eq "$datetime_regex"; then
    printf "Invalid datetime format\n" >&2
    printf "Use --help for help\n" >&2
    exit 1
  fi
}

read_data() {
  file="$1"
  data=""
  # Check if file exists
  if [ -f "$file" ]; then
    # Read gzip file
    if echo "$file" | grep -q "\.gz$"; then
      data=$(zcat "$file" 2>/dev/null | grep "^$user;")
    # Read text file
    else
      data=$(grep "^$user;" "$file")
    fi
    log_data="$log_data$data
"
  else
    echo "File '$file' not found" >&2
    exit 1
  fi
}

main "$@"
